version: "3.8"
services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ksh147!!
      MYSQL_DATABASE: catcat
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network

  backend:
    image: ddukio/backend:latest
    container_name: backend
    depends_on:
      - mysql
      - redis
    environment:
      - TZ=Asia/Seoul
      - JAVA_TOOL_OPTIONS=-Duser.timezone=Asia/Seoul
    ports:
      - "8081:8080"
    networks:
      - app_network

  frontend:
    image: ddukio/frontend:latest
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "3000:80"
    networks:
      - app_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app_network

  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysql-exporter
    restart: always
    command: ["--config.my-cnf=/etc/my.cnf"]
    volumes:
      - ./exporter/.my.cnf:/etc/my.cnf:ro
    environment:
      - DATA_SOURCE_NAME=root:ksh147!!@tcp(mysql:3306)/
    ports:
      - "9104:9104"
    depends_on:
      - mysql
    networks:
      - app_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app_network
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1

    logstash:
    image: docker.elastic.co/logstash/logstash:7.17.13
    container_name: logstash
    ports:
      - "5044:5044"
      - "5000:5000"
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./elk/logstash/logs:/usr/share/logstash/logs   # 로그 데이터 보존을 위한 볼륨 마운트
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx512m -Djava.io.tmpdir=/tmp"  # 임시 디렉토리는 내부 기본 값 사용 (변경하지 않음)
    depends_on:
      - elasticsearch
    networks:
      - app_network
    restart: always


  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.13
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - app_network
    restart: always

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.13
    container_name: filebeat
    user: root
    volumes:
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/log/spring-boot:/var/log/spring-boot:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: filebeat -e -strict.perms=false
    depends_on:
      - elasticsearch
      - logstash
    networks:
      - app_network
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - app_network


networks:
  app_network:
    driver: bridge

volumes:
  mysql_data:
  grafana_data:
  elasticsearch_data:

// com.c107.ledger.service.LedgerMemoService.java
package com.c107.ledger.service;

import com.c107.ledger.entity.LedgerMemo;
import com.c107.ledger.repository.LedgerMemoRepository;
import com.c107.transactions.entity.Transaction;
import com.c107.transactions.repository.TransactionRepository;
import com.c107.ai.service.GptService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class LedgerMemoService {

    private final TransactionRepository transactionRepository;
    private final LedgerMemoRepository memoRepository;
    private final GptService gptService;

    @Transactional
    public LedgerMemo generateMemoForDate(LocalDate date, Integer userId) {
        // 1. Skip if already exists
        if (memoRepository.findByMemoDate(date).isPresent()) {
            return memoRepository.findByMemoDate(date).get();
        }

        // 2. Fetch transactions for that date & user
        LocalDateTime start = date.atStartOfDay();
        LocalDateTime end   = date.plusDays(1).atStartOfDay();
        List<Transaction> txns = transactionRepository
                .findAllByUserIdAndTransactionDateBetween(userId, start, end);

        if (txns.isEmpty()) {
            return null; // or save a ‚Äúno activity‚Äù memo
        }

        // 3. Build a short summary
        String summary = buildSummaryPrompt(txns);

        // 4. Ask GPT
        String memoContent = gptService.generateMemo(summary);

        // 5. Persist
        LedgerMemo memo = LedgerMemo.builder()
                .memoDate(date)
                .content(memoContent)
                .createdAt(LocalDateTime.now())
                .build();
        return memoRepository.save(memo);
    }

    private String buildSummaryPrompt(List<Transaction> txns) {
        StringBuilder sb = new StringBuilder();

        sb.append("Îã§ÏùåÏùÄ ÏÇ¨Ïö©ÏûêÏùò Ïò§Îäò ÏÜåÎπÑ ÎÇ¥Ïó≠ÏûÖÎãàÎã§.\n");
        sb.append("Í∞Å Í±∞ÎûòÏóêÎäî Í∞ÄÎßπÏ†ê Ïù¥Î¶ÑÍ≥º Í∏àÏï°Ïù¥ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.\n");
        sb.append("Í±∞Îûò ÎÇ¥Ïó≠ÏùÑ Î∂ÑÏÑùÌïòÏó¨ ÏÜåÎπÑ ÏäµÍ¥ÄÏùÑ Ïú†ÏæåÌïú Í≥†ÏñëÏù¥ ÎßêÌà¨Î°ú ÏöîÏïΩÌï¥ Ï£ºÏÑ∏Ïöî.\n");
        sb.append("Ïπ¥ÌÖåÍ≥†Î¶¨ÎèÑ ÏïåÏïÑÏÑú Ï∂îÏ∏°Ìï¥ÏÑú ÏöîÏïΩÌïòÍ≥†, ÏÜåÎπÑ ÏäµÍ¥ÄÏóê ÎåÄÌï¥ Í∑ÄÏóΩÍ≥† Í∞ÄÎ≤ºÏö¥ Ï°∞Ïñ∏ÎèÑ Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.\n");
        sb.append("ÎßàÏßÄÎßâÏùÄ 'ÎÉ•~' ÎòêÎäî 'Îã§Ïòπ!' Í∞ôÏùÄ ÎßêÌà¨Î°ú ÎßàÎ¨¥Î¶¨Ìï¥ Ï£ºÏÑ∏Ïöî.\n\n");

        txns.stream()
                .filter(t -> t.getDeleted() == 0) // üêæ ÏÇ≠Ï†úÎêú Í±∞Îûò Ï†úÏô∏
                .forEach(t -> sb.append(String.format("- %s: %dÏõê\n", t.getMerchantName(), t.getAmount())));

        return sb.toString();
    }

}
